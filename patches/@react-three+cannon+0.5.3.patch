diff --git a/node_modules/@react-three/cannon/src/Provider.tsx b/node_modules/@react-three/cannon/src/Provider.tsx
index 50d2ec8..7540425 100644
--- a/node_modules/@react-three/cannon/src/Provider.tsx
+++ b/node_modules/@react-three/cannon/src/Provider.tsx
@@ -105,22 +105,22 @@ export default function Provider({
   const [events] = useState<Events>({})
   const [subscriptions] = useState<Subscriptions>({})
   const bodies = useRef<{ [uuid: string]: number }>({})
-  const loop = useMemo(() => () => {
-    if(buffers.positions.byteLength !== 0 && buffers.quaternions.byteLength !== 0) {
-      worker.postMessage({ op: 'step', ...buffers }, [buffers.positions.buffer, buffers.quaternions.buffer])
-    }
-  }, []);
+  // const loop = useMemo(() => () => {
+  //   if(buffers.positions.byteLength !== 0 && buffers.quaternions.byteLength !== 0) {
+  //     worker.postMessage({ op: 'step', ...buffers }, [buffers.positions.buffer, buffers.quaternions.buffer])
+  //   }
+  // }, []);
 
-  const prevPresenting = useRef(false);
-  useFrame(() => {
-    if(gl.xr.isPresenting && !prevPresenting.current) {
-      gl.xr.getSession().requestAnimationFrame(loop);
-    }
-    if(!gl.xr.isPresenting && prevPresenting.current) {
-      requestAnimationFrame(loop);
-    }
-    prevPresenting.current = gl.xr.isPresenting;
-  });
+  // const prevPresenting = useRef(false);
+  // useFrame(() => {
+  //   if(!!gl.xr.isPresenting && !prevPresenting.current) {
+  //     gl.xr.getSession().requestAnimationFrame(loop);
+  //   }
+  //   if(!gl.xr.isPresenting && prevPresenting.current) {
+  //     requestAnimationFrame(loop);
+  //   }
+  //   prevPresenting.current = gl.xr.isPresenting;
+  // });
 
   useEffect(() => {
     worker.postMessage({
@@ -137,17 +137,22 @@ export default function Provider({
       },
     })
 
+    function loop() {
+      worker.postMessage({ op: 'step', ...buffers }, [buffers.positions.buffer, buffers.quaternions.buffer])
+    }
+
     worker.onmessage = (e: IncomingWorkerMessage) => {
       switch (e.data.op) {
         case 'frame':
           buffers.positions = e.data.positions
           buffers.quaternions = e.data.quaternions
           e.data.observations.forEach(([id, value]) => subscriptions[id](value))
-          if(gl.xr.isPresenting) {
-            gl.xr.getSession().requestAnimationFrame(loop);
-          } else {
-            requestAnimationFrame(loop);
-          }
+          requestAnimationFrame(loop)
+          // if(gl.xr.isPresenting) {
+          //   gl.xr.getSession().requestAnimationFrame(loop);
+          // } else {
+          //   requestAnimationFrame(loop);
+          // }
           if (e.data.active) invalidate()
           break
         case 'sync':
